name: Deploy Backend to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 425687053209
  ECR_REGISTRY: 425687053209.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: clubapp-backend
  ECS_SERVICE: clubapp-dev-svc
  ECS_CLUSTER: clubapp-dev-ecs
  ECS_TASK_DEFINITION: clubapp-backend-task
  AWS_ROLE_TO_ASSUME: arn:aws:iam::425687053209:role/github-actions-apprunner

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build Docker image
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          echo "üî® Building Docker image..."
          echo "Registry: $ECR_REGISTRY"
          echo "Repository: ${{ env.ECR_REPOSITORY }}"
          echo "Tag: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "‚úÖ Docker image built successfully"

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          echo "üì§ Pushing Docker images to ECR..."
          echo "Image with SHA tag: $IMAGE_TAG"
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "Image with latest tag"
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "‚úÖ Images pushed successfully!"

      - name: Register task definition
        id: task-def
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          cd backend
          echo "üìù Registering ECS task definition..."
          echo "Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
          
          # Replace the image URI placeholder with the latest image
          sed -i "s|425687053209.dkr.ecr.us-east-1.amazonaws.com/clubapp-backend:latest|${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest|g" task-definition.json
          
          # Register the task definition and get the ARN
          TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --region ${{ env.AWS_REGION }})
          TASK_DEF_ARN=$(echo $TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "‚úÖ Task definition registered: $TASK_DEF_ARN"

      - name: Update ECS service
        run: |
          set -e
          echo "üöÄ Updating ECS service..."
          echo "Cluster: ${{ env.ECS_CLUSTER }}"
          echo "Service: ${{ env.ECS_SERVICE }}"
          echo "Task Definition: ${{ env.ECS_TASK_DEFINITION }}"
          
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --region ${{ env.AWS_REGION }} \
            --force-new-deployment
          
          echo "‚úÖ Service update initiated"

      - name: Wait for service to be stable
        run: |
          set -e
          echo "‚è≥ Waiting for service to stabilize (max 10 minutes)..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}
          echo "‚úÖ Service is now stable"
        timeout-minutes: 10

      - name: Get service status
        if: always()
        run: |
          set -e
          echo "üìä Service status:"
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].[status,desiredCount,runningCount,deployments]' \
            --output table
          
          echo ""
          echo "üìã Recent task definitions:"
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --region ${{ env.AWS_REGION }} \
            --query 'taskDefinition.[revision,status,containerDefinitions[0].image]' \
            --output table

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Backend deployment completed successfully!"
          echo ""
          echo "üìã Deployment Summary:"
          echo "  Cluster: ${{ env.ECS_CLUSTER }}"
          echo "  Service: ${{ env.ECS_SERVICE }}"
          echo "  Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          echo "  Commit: ${{ github.sha }}"
          echo ""
          echo "üîó View deployment: https://console.aws.amazon.com/ecs/v2/clusters/${{ env.ECS_CLUSTER }}/services/${{ env.ECS_SERVICE }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Backend deployment failed!"
          echo ""
          echo "üìã Troubleshooting:"
          echo "1. Check logs: aws logs tail /ecs/clubapp-backend --follow"
          echo "2. Check service status: aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }}"
          echo "3. Check recent tasks: aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }}"
          exit 1
