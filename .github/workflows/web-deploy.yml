name: Deploy Web Portal

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
      - '.github/workflows/web-deploy.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  S3_BUCKET: clubapp-dev-assets
  AWS_ROLE_TO_ASSUME: arn:aws:iam::425687053209:role/github-actions-apprunner
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID || '' }}
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:3000' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package.json

      - name: Install dependencies
        working-directory: ./web
        run: |
          echo "üì¶ Installing dependencies..."
          npm install --legacy-peer-deps
          echo "‚úÖ Dependencies installed"

      - name: Build Next.js app
        working-directory: ./web
        env:
          NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
        run: |
          echo "üèóÔ∏è Building Next.js app..."
          echo "API URL: ${{ env.NEXT_PUBLIC_API_URL }}"
          npm run build:export
          echo "‚úÖ Build completed successfully"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        working-directory: ./web
        run: |
          echo "üì§ Uploading to S3..."
          aws s3 sync out/ s3://${{ env.S3_BUCKET }}/web/ \
            --delete \
            --cache-control "max-age=31536000,immutable" \
            --exclude "*.html" && \
          aws s3 sync out/ s3://${{ env.S3_BUCKET }}/web/ \
            --cache-control "max-age=0,no-cache,no-store,must-revalidate" \
            --include "*.html"
          echo "‚úÖ S3 sync completed"

      - name: Invalidate CloudFront cache
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          echo "üîÑ Invalidating CloudFront cache..."
          echo "Distribution ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
          echo "‚úÖ CloudFront cache invalidated"

      - name: Skip CloudFront invalidation
        if: env.CLOUDFRONT_DISTRIBUTION_ID == ''
        run: |
          echo "‚ö†Ô∏è CLOUDFRONT_DISTRIBUTION_ID not configured"
          echo "To enable CloudFront cache invalidation:"
          echo "1. Go to: https://github.com/shafkat1/club/settings/secrets/actions"
          echo "2. Add secret: CLOUDFRONT_DISTRIBUTION_ID"
          echo "3. Get your Distribution ID from AWS CloudFront console"

      - name: Upload coverage to S3
        if: always()
        working-directory: ./web
        run: |
          if [ -d "coverage" ]; then
            echo "üìä Uploading coverage reports..."
            aws s3 sync coverage/ s3://${{ env.S3_BUCKET }}/coverage/web/
            echo "‚úÖ Coverage uploaded"
          fi

      - name: Notify deployment
        if: success()
        run: |
          echo "‚úÖ Web portal deployed successfully!"
          echo "S3 Bucket: ${{ env.S3_BUCKET }}"
          if [ -n "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "Distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Web portal deployment failed!"
          echo "Check the logs above for details"
          exit 1
