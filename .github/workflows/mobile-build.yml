name: Build Mobile App

on:
  push:
    branches:
      - main
    paths:
      - 'mobile/**'
      - '.github/workflows/mobile-build.yml'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

env:
  NODE_VERSION: '18'
  EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Expo CLI
        run: npm install -g eas-cli

      - name: Install dependencies
        working-directory: ./mobile
        run: npm install --legacy-peer-deps

      - name: Lint code
        working-directory: ./mobile
        run: npm run lint || true

      - name: Initialize EAS project
        working-directory: ./mobile
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          echo "Setting up EAS configuration..."
          echo "EXPO_TOKEN is set: $(if [ -n '${{ secrets.EXPO_TOKEN }}' ]; then echo 'YES'; else echo 'NO'; fi)"
          # Run eas init with force flag to accept defaults
          eas init --force || true
          echo "EAS setup complete"
          
      - name: Validate EAS configuration
        working-directory: ./mobile
        run: |
          echo "=== EAS Configuration Status ==="
          echo "eas.json exists: $(if [ -f eas.json ]; then echo 'YES'; else echo 'NO'; fi)"
          if [ -f eas.json ]; then
            cat eas.json | grep -E '(preview|distribution|buildType)'
          fi
          echo "app.json exists: $(if [ -f app.json ]; then echo 'YES'; else echo 'NO'; fi)"
          echo "=== Environment Info ==="
          eas --version || echo "EAS version check failed"

      - name: Setup Java for keytool
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate temporary Android keystore for CI
        working-directory: ./mobile
        run: |
          echo "=== Generating temporary Android keystore for CI ==="
          STORE_PASSWORD=$(openssl rand -hex 16)
          KEY_PASSWORD=$(openssl rand -hex 16)
          KEY_ALIAS=upload
          echo "STORE_PASSWORD length: ${#STORE_PASSWORD}"
          echo "KEY_PASSWORD length: ${#KEY_PASSWORD}"
          keytool -genkeypair -v \
            -keystore android-upload-key.jks \
            -storetype JKS \
            -storepass "$STORE_PASSWORD" \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -alias "$KEY_ALIAS" \
            -keypass "$KEY_PASSWORD" \
            -dname "CN=Club App, OU=Dev, O=Club, L=City, S=State, C=US"

          # Export for potential use and create credentials.json for EAS local credentials
          echo "EXPO_ANDROID_KEYSTORE_PASSWORD=$STORE_PASSWORD" >> $GITHUB_ENV
          echo "EXPO_ANDROID_KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
          echo "EXPO_ANDROID_KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV

          cat > credentials.json <<EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "android-upload-key.jks",
                "keystorePassword": "$STORE_PASSWORD",
                "keyAlias": "$KEY_ALIAS",
                "keyPassword": "$KEY_PASSWORD"
              }
            }
          }
          EOF
          echo "credentials.json created for EAS local credentials"

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Copy npm settings into mobile project
        run: |
          cp mobile/.npmrc mobile/.npmrc || true

      - name: Build preview for Android
        working-directory: ./mobile
        if: github.event_name == 'push' || github.event.inputs.build_type == 'preview'
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          echo "=== Starting Android Preview Build ==="
          echo "Build timestamp: $(date)"
          echo "Working directory: $(pwd)"
          export CI=true
          eas build --platform android --profile preview 2>&1 || (echo "Build failed with exit code $?" && exit 1)
          echo "=== Android build completed ===" 

      - name: Build production for Android
        working-directory: ./mobile
        if: github.event.inputs.build_type == 'production'
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: eas build --platform android --profile production --non-interactive

      - name: Notify build status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Mobile app build completed successfully!"
            echo "Builds are managed by Expo EAS and available in your Expo dashboard"
          else
            echo "❌ Mobile app build failed!"
          fi

  submit:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.build_type == 'production' && success()
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Expo CLI
        run: npm install -g eas-cli

      - name: Submit to Apple App Store
        working-directory: ./mobile
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: eas submit --platform ios --non-interactive || true

      - name: Submit to Google Play Store
        working-directory: ./mobile
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: eas submit --platform android --non-interactive || true

      - name: Notify submission
        run: |
          echo "Mobile app submitted to app stores"
